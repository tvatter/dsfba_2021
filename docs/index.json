[
{
	"uri": "https://tvatter.github.io/dsfba_2021/syllabus/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": "People Instructor  Name: Thibault Vatter Email: thibault.vatter@unil.ch Office hours: I am based in New York, so I will not hold office hours, but you can write me to set-up a meeting via Zoom.  Teaching assistants  Emma Maury Luca Giacobi Daniel Szenes  Course Readings There will be no mandatory reading. However, weekly readings related to the lectures are strongly recommended, and additional ressources will undoubtedly be useful.\nEvaluation Evaluation will be based on assignments and a final project. For each assignment as well as the project, students will have to provide code and/or detailed written reports. Additionally, students will produce a video presentation of their project.\nRetake exam The retake consists in asking the failing students to do a new final project and present it.\n"
},
{
	"uri": "https://tvatter.github.io/dsfba_2021/lectures/",
	"title": "Lectures",
	"tags": [],
	"description": "",
	"content": "In the third column, references are to chapters from Advanced R (ADVR), R for Data Science (R4DS), and R Markdown: The Definitive Guide (RMD).\n   Date Topic Reading     09/22 Introduction    09/29 Data Structures and Subsetting ADVR 3+4   10/06 Control Flows and Functions ADVR 5, 6, 9, 11   10/13 Data Wrangling R4DS 5, 9-16, 18   10/20 Visualization and Communication R4DS 3+28, RMD 2   10/27 Data Wrangling R4DS 5, 9-16, 18   11/03 Visualization and Communication R4DS 3+28, RMD 2   11/10 Data Wrangling R4DS 5, 9-16, 18   11/17 Visualization and Communication R4DS 3+28, RMD 2   11/24 Project coaching    12/01 Presentations/Dashboards/Interactivity RMD 4+5, htmlwidgets   12/08 Projects Coaching    12/15 Projects Presentations     "
},
{
	"uri": "https://tvatter.github.io/dsfba_2021/assignments/",
	"title": "Assignments",
	"tags": [],
	"description": "",
	"content": "On this page, you will find information about your assignments.\nMilestones    Date Assignment     10/13 Project proposal   11/10 Project update   12/15 Final report   12/15 Video presentation    "
},
{
	"uri": "https://tvatter.github.io/dsfba_2021/assignments/project/",
	"title": "Project",
	"tags": [],
	"description": "",
	"content": "For this assignment, you will work on a real data science project. The goal of the project is to go through the complete data science process to answer questions you have about some topic of your own choosing. You will acquire the data, design your visualizations, run statistical analysis, and communicate the results.\nProject Milestones There are a few milestones for your final project.\n   Date Assignment     10/13 Project proposal   11/10 Project update   12/15 Project Report    Note that:\n No extensions will be given for any of the project due dates except for medical reasons. Projects submitted after the final due date will not be graded.  Project proposal The proposal should be received by October 13, 2021.\n The title can be changed at a later date. Each team (or individual if working alone) only needs to submit one proposal. At this stage, we reserve the right to reject a project proposal if it is not judged satisfactory. But the goal is mostly to set you on a path to succeed!  Project udpate The update should be received by November 10, 2021.\n Make sure that the title is final at this points. Each team (or individual if working alone) only needs to submit one update. At this stage, we reserve the right to schedule a meeting to provide additional guidance if the update is not judged satisfactory.  Project report The final report is composed of two parts:\n RMarkdown and compiled HTML files describe the project in details. The slides from your presentation.  RMarkdown and compiled HTML The most important deliverable of your project is the set of RMarkdown and compiled HTML files by December 15, 2021. They should detail your steps in developing your solution, including how you collected the data, alternative solutions you tried, describing statistical methods you used, and the insights you got. Equally important to your final results is how you got there! Your RMarkdown and HTML files are the place you describe and document the space of possibilities you explored at each step of your project. We strongly advise you to include many visualizations.\nYour RMarkdown should include the following topics. Depending on your project type, the amount of discussion you devote to each of them will vary:\n  Overview and Motivation: Provide an overview of the project goals and the motivation for it. Consider that this will be read by people who did not see your project proposal.\n  Related Work: Anything that inspired you, such as a paper, a website, or something we discussed in class.\n  Initial Questions: What questions are you trying to answer? How did these questions evolve over the course of the project? What new questions did you consider in the course of your analysis?\n  Data: Source, scraping method, cleanup, etc.\n  Exploratory Analysis: What visualizations did you use to look at your data in different ways? Justify the decisions you made, and show any major changes to your ideas. How did you reach these conclusions?\n  Modeling: What are the different statistical methods you considered? Why did you choose a given model? How about competing approaches?\n  Final Analysis: What did you learn about the data? How did you answer the questions? How can you justify your answers?\n  As this will be your only chance to describe your project in detail, make sure that your RMarkdown file and compiled HTML file are standalone documents that fully describe your process and results. For instructions on how to submit, please see Submission Instructions below.\nAs a side note, the following scale will be used to grade projects:\n Overview, motivation, related work, research questions: 10/100 Data sources and description: 10/100 Exploratory data analysis: 35/100 Answering the research questions and final analysis: 35/100 Aesthetics, english writing, project organization, code quality: 10/100 Additionally, you have the opportunity to earn bonuses of up to 20/100 (e.g., by using interactive visualization or presenting your work in especially interesting ways, for instance by complementing your report with a website generated with markdown).  Code We expect you to write high-quality and readable R code in your RMarkdown file. You should strive for doing things the right way and think about aspects such as reproducibility, efficiency, cleaning data, etc. We also expect you to document your code.\nProject presentation Each team will prepare a seven minutes video presentation showing a demo of your project and/or some slides.\nWe will strictly enforce the time limit, so please make sure you are not running longer. Use principles of good storytelling and presentations to get your key points across. Focus the majority of your presentation on your main contributions rather than on technical details. What do you feel is the best part of your project? What insights did you gain? What is the single most important thing you would like your audience to take away? Make sure it is upfront and center rather than at the end.\nWe use the following criteria to evaluate oral presentations:\n Content (4/20) Organization (4/20) Teamwork (4/20, project done individually automatically earn the 4 points) Visuals (4/20) Presentation mechanics (4/20)  A link with a video should be submitted on December 15, 2021, and slides should be submitted by the same day. For instructions on how to submit, please see Submission Instructions below.\nSubmission Instructions How to submit the project proposal (due October 13, 2021) TBA\nHow to submit the project udpate (due November 10, 2021) TBA\nHow to submit the data, RMarkdown and compiled HTML files (due December 15, 2021) TBA\nHow to submit the presentation slides and video link (due December 15, 2021) TBA\nGrading  While the project proposal is not part of the grade, it is MANDATORY to proceed. The project update, namely HW4, is worth 10% of the overall course grade. The report and the presentation represent 60% of the overall course grade:  50% for your RMarkdown files and the knitted report. This includes the quality of your data analysis and R code, the complexity and level of difficulty of your project, completeness and overall functionality of your analysis.  10% for your presentation and the quality of its storytelling aspects.      Data sources / project ideas  Open Data Inception - 2600+ Open Data Portals Around the World CORGIS Datasets Project Governments / NGOs websites like  US resources  NYC Open Data The General Social Survey US Bureau of Labor Statistics US Department of Education Federal Reserve Economic Data US Department of Agriculture   World Bank Open Data UN Data and other UNSD databases  Monthly Bulletin of Statistics Online SDG Indicators UN Comtrade Database     Other  News API Kaggle 10 great sites with free datasets   Some project ideas  Blog of the Data Incubator FiveThirtyEight 2016 jalous list, FiveThirtyEight 2019 jalousy list First answer to this quora question    "
},
{
	"uri": "https://tvatter.github.io/dsfba_2021/ressources/",
	"title": "Resources",
	"tags": [],
	"description": "",
	"content": "Getting started with R and Rstudio The CRAN website CRAN is a network of ftp and web servers around the world that store identical, up-to-date, versions of R and its documentation.\nAn Introduction to R This official and up-to-date tutorial, gives an introduction to the language and how to use R for doing statistical analysis and graphics.\nRStudio RStudio is an integrated development environment (IDE) for R. It includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging and workspace management.\nRstudio cheat sheets A trove of cheat sheets below to make it easy to learn about and use some of R\u0026rsquo;s most useful packages.\nR packages for data science The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.\nBooks Advanced R  The book is designed primarily for R users who want to improve their programming skills and understanding of the language. It should also be useful for programmers coming to R from other languages, as it explains some of R’s quirks and shows how some parts that seem horrible do have a positive side. Hadley Wickham  R for Data Science  This book will teach you how to do data science with R: You\u0026rsquo;ll learn how to get your data into R, get it into the most useful structure, transform it, visualise it and model it. In this book, you will find a practicum of skills for data science. Garrett Grolemund and Hadley Wickham  R Markdown: The Definitive Guide  The document format \u0026ldquo;R Markdown\u0026rdquo; was first introduced in the knitr package (Xie 2015, 2020c) in early 2012. The idea was to embed code chunks (of R or other languages) in Markdown documents. In fact, knitr supported several authoring languages from the beginning in addition to Markdown, including LaTeX, HTML, AsciiDoc, reStructuredText, and Textile. Looking back over the five years, it seems to be fair to say that Markdown has become the most popular document format, which is what we expected. Yihui Xie, J. J. Allaire, Garrett Grolemund  Online learning Coding club\u0026rsquo;s tutorials  Our mission is to create a fun and supportive environment where we develop programming and statistics skills together, using R.\nWe want to replace statistics anxiety and code fear with inspiration and motivation to learn, and here we will share our experience.\n Datacamp\u0026rsquo;s free R tutorial and Try R by Code School Both sites provide interactive lessons that will get you writing real code in minutes. They are a great place to make mistakes and test out new skills. You are told immediately when you go wrong and given a chance to fix your code.\nWriting functions in R This course will teach you the fundamentals of writing functions in R so that, among other things, you can make your code more readable, avoid coding errors, and automate repetitive tasks.\nIntroduction to the tidyverse This is an introduction to the dplyr and ggplot2 packages through exploration and visualization of country data over time. This is a suitable course for people who have no or limited experience in R and are interested in learning to perform data analysis.\nData visualisation with ggplot2 Covers the basics of ggplot2. Followed by part 2 which covers more advanced topics.\nExploratory data analysis in R: a case study This course brings ggplot2 and dplyr into action in an in-depth analysis of United Nations voting data. The course also introduces broom for tidying model output and the tidyr package for wrangling data into an explorable shape.\nMisc Easy web applications in R Shiny is an open source R package that provides an elegant and powerful web framework for building web applications using R. Shiny helps you turn your analyses into interactive web applications without requiring HTML, CSS, or JavaScript knowledge.\nRcpp for Seamless R and C++ Integration The Rcpp package has become the most widely used language extension for R, the powerful environment and language for computing with data. As of May 2017, 1026 packages on CRAN and a further 91 on BioConductor deploy Rcpp to extend R, to accelerate computations and to connect to other C++ projects.\n"
},
{
	"uri": "https://tvatter.github.io/dsfba_2021/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://tvatter.github.io/dsfba_2021/",
	"title": "Data Science for Business Analytics",
	"tags": [],
	"description": "",
	"content": "Data Science for Business Analytics Important information  Zoom link: use this link for the lectures/exercise sessions (password is dsfba_2021).  Aim of the course The aim of this course is to learn the most important tools to use data science in a business context, and includes concepts from statistics and computer science:\n Just as a chemist learns how to clean test tubes and stock a lab, you\u0026rsquo;ll learn how to clean data and draw plots and many other things besides. These are the skills that allow data science to happen, and here you will find the best practices for doing each of these things with R. You\u0026rsquo;ll learn how to use the grammar of graphics, literate programming, and reproducible research to save time. You\u0026rsquo;ll also learn how to manage cognitive resources to facilitate discoveries when wrangling, visualizing, and exploring data. Garrett Grolemund and Hadley Wickham  The course will cover the following topics:\n Program  Data structures Control flows Functions   Explore  Data visualization Data transformation Exploratory data analysis   Wrangle  Tidy data Relational data Strings, factors, dates and times   Communicate  Literate programming Graphics for communication    As the class will be hands-on and centered around data, bringing your laptop to lectures and exercise sessions is recommended.\n"
},
{
	"uri": "https://tvatter.github.io/dsfba_2021/assignments/hw0/",
	"title": "HW0: R Basics",
	"tags": [],
	"description": "",
	"content": " R Foundations In this tutorial, you’ll get an overview of the basic programming concepts in R and main data types. It’s just enough to get you up and running essential R code. However, for true “beginners”, we highly recommend going through Advanced R - Chapter ‘Foundations’ from which the content of this assignment is (mostly) inspired by.\nR, RStudio, Installation  R is a programming language for statistical analysis RStudio is the integrated development environment (IDE) for R in which we write and execute R code, plot things and write reports. Installation guidelines and details (Mac, Windows, Linux)  To follow the tutorial, you can start R Studio and execute statements from the code chunks in the R Console.\n Libraries R uses different libraries or packages to load specific functions (read excel files, talk to Twitter, generate plots).\n# To install package from the console, note the quotation marks! # install.packages(\u0026quot;name_of_package\u0026quot;) # load package in environment library(mgcv)  Ex. 0 As a starting point you can install a package that we’ll extensively use throughout the semester:\n tidyverse    Assignment In R, we assign values (numbers, characters, data frames) to objects (vectors, matrices, variables). To do so, we use the \u0026lt;- operator:\n# name_of_object \u0026lt;- value an_object \u0026lt;- 2 another_object \u0026lt;- \u0026quot;some string\u0026quot; # inspect object\u0026#39;s value an_object #\u0026gt; [1] 2 print(another_object) #\u0026gt; [1] \u0026quot;some string\u0026quot;  Data Structures R’s base data structures can be organised by their dimensionality (1d, 2d, or nd) and whether they’re homogeneous (all contents must be of the same type) or heterogeneous (the contents can be of different types).\n   Homogeneous Heterogeneous    1d Atomic vector List  2d Matrix Data frame  nd Array      Vectors The basic data structure in R is the vector. Vectors can be of two kinds: atomic vectors and lists. They have three common properties:\n Type, typeof(), what it is. Length, length(), how many elements it contains. Attributes, attributes(), additional arbitrary metadata.  However, atomic vectors and lists differ in the types of their elements: all elements of an atomic vector must be the same type, whereas the elements of a list can have different types.\nThere are four common types of atomic vectors:\n logical integer double (often called numeric) character  Atomic vectors are usually created with c(), short for combine:\ndbl_var \u0026lt;- c(1, 2.5, 4.5) # with the L suffix, you get an integer rather than a double int_var \u0026lt;- c(1L, 6L, 10L) # use TRUE and FALSE (or T and F) to create logical vectors log_var \u0026lt;- c(TRUE, FALSE, T, F) chr_var \u0026lt;- c(\u0026quot;these are\u0026quot;, \u0026quot;some strings\u0026quot;) int_var \u0026lt;- c(1L, 6L, 10L) typeof(int_var) #\u0026gt; [1] \u0026quot;integer\u0026quot; is.integer(int_var) #\u0026gt; [1] TRUE  Lists List objects can hold elements of any type, including lists. You construct lists by using list() instead of c():\nx \u0026lt;- list(1:3, \u0026quot;a\u0026quot;, c(TRUE, FALSE, TRUE), c(2.3, 5.9)) str(x) #\u0026gt; List of 4 #\u0026gt; $ : int [1:3] 1 2 3 #\u0026gt; $ : chr \u0026quot;a\u0026quot; #\u0026gt; $ : logi [1:3] TRUE FALSE TRUE #\u0026gt; $ : num [1:2] 2.3 5.9  Attributes All objects can have arbitrary additional attributes, used to store metadata about the object. Attributes can be thought of as a named list (with unique names). They can be accessed individually with attr() or all at once (as a list) with attributes().\ny \u0026lt;- 1:10 attr(y, \u0026quot;my_attribute\u0026quot;) \u0026lt;- \u0026quot;This is a vector\u0026quot; # inspect the attribute of y attr(y, \u0026quot;my_attribute\u0026quot;) #\u0026gt; [1] \u0026quot;This is a vector\u0026quot;  Matrices and arrays Adding a dim attribute to an atomic vector allows it to behave like a multi-dimensional array. A special case of the array is the matrix, which has two dimensions. Matrices and arrays are created with matrix() and array(), or by using the assignment form of dim():\n# two scalar arguments to specify rows and columns a \u0026lt;- matrix(1:6, ncol = 3, nrow = 2) # one vector argument to describe all dimensions b \u0026lt;- array(1:12, c(2, 3, 2)) # you can also modify an object in place by setting dim() c \u0026lt;- 1:6 dim(c) \u0026lt;- c(3, 2) c #\u0026gt; [,1] [,2] #\u0026gt; [1,] 1 4 #\u0026gt; [2,] 2 5 #\u0026gt; [3,] 3 6 length() and names() have high-dimensional generalisations:\n length() generalises to nrow() and ncol() for matrices, and dim() for arrays.\n names() generalises to rownames() and colnames() for matrices, and dimnames(), a list of character vectors, for arrays.\n  c() generalises to cbind() and rbind() for matrices, and to abind() (provided by the abind package) for arrays. You can transpose a matrix with t(); the generalised equivalent for arrays is aperm().\nYou can test if an object is a matrix or array using is.matrix() and is.array(), or by looking at the length of the dim(). as.matrix() and as.array() make it easy to turn an existing vector into a matrix or array.\n Data frames A data frame is the most common way of storing data in R, and if used systematically makes data analysis easier. Under the hood, a data frame is a list of equal-length vectors. This makes it a 2-dimensional structure, so it shares properties of both the matrix and the list. This means that a data frame has names(), colnames(), and rownames(), although names() and colnames() are the same thing. The length() of a data frame is the length of the underlying list and so is the same as ncol(); nrow() gives the number of rows.\ndf \u0026lt;- data.frame(x = 1:3, y = c(\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;)) str(df) #\u0026gt; \u0026#39;data.frame\u0026#39;: 3 obs. of 2 variables: #\u0026gt; $ x: int 1 2 3 #\u0026gt; $ y: chr \u0026quot;a\u0026quot; \u0026quot;b\u0026quot; \u0026quot;c\u0026quot; You can combine data frames using cbind() and rbind():\ncbind(df, data.frame(z = 3:1)) #\u0026gt; x y z #\u0026gt; 1 1 a 3 #\u0026gt; 2 2 b 2 #\u0026gt; 3 3 c 1  Subsetting vectors Let’s explore the different types of subsetting with a simple vector, x.\nx \u0026lt;- c(2, 4, 3, 5) Positive integers return elements at the specified positions:\nx[c(3, 1)] #\u0026gt; [1] 3 2 Duplicated indices yield duplicated values:\nx[c(1, 1)] #\u0026gt; [1] 2 2 Real numbers are silently truncated to integers:\nx[c(2, 9)] #\u0026gt; [1] 4 NA Negative integers omit elements at the specified positions:\nx[-c(3, 1)] #\u0026gt; [1] 4 5 You can’t mix positive and negative integers in a single subset: x[c(-1, 2)] is not allowed.\nLogical vectors select elements where the corresponding logical value is TRUE. This is probably the most useful type of subsetting because you write the expression that creates the logical vector:\nx[c(TRUE, TRUE, FALSE, FALSE)] #\u0026gt; [1] 2 4 x[x \u0026gt; 3] #\u0026gt; [1] 4 5 A missing value in the index always yields a missing value in the output:\nx[c(TRUE, TRUE, NA, FALSE)] #\u0026gt; [1] 2 4 NA Nothing returns the original vector. This is not useful for vectors but is very useful for matrices, data frames, and arrays. It can also be useful in conjunction with assignment.\nx[] #\u0026gt; [1] 2 4 3 5 Zero returns a zero-length vector. This is not something you usually do on purpose, but it can be helpful for generating test data.\nx[0] #\u0026gt; numeric(0) If the vector is named, you can also use character vectors to return elements with matching names:\n(y \u0026lt;- setNames(x, letters[1:4])) #\u0026gt; a b c d #\u0026gt; 2 4 3 5 y[c(\u0026quot;d\u0026quot;, \u0026quot;c\u0026quot;, \u0026quot;a\u0026quot;)] #\u0026gt; d c a #\u0026gt; 5 3 2 Like integer indices, you can repeat indices:\ny[c(\u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;)] #\u0026gt; a a a #\u0026gt; 2 2 2 When subsetting with [ names are always matched exactly\nz \u0026lt;- c(abc = 1, def = 2) z[c(\u0026quot;a\u0026quot;, \u0026quot;d\u0026quot;)] #\u0026gt; \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; #\u0026gt; NA NA  Subsetting lists, matricies and data frames Subsetting a list works in the same way as subsetting an atomic vector. Using [ will always return a list; [[ and $, as described below, let you pull out the components of the list.\nYou can subset higher-dimensional structures in three ways:\n With multiple vectors. With a single vector. With a matrix.  a \u0026lt;- matrix(1:9, nrow = 3) colnames(a) \u0026lt;- c(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;, \u0026quot;C\u0026quot;) # multiple vectors a[1:2, ] #\u0026gt; A B C #\u0026gt; [1,] 1 4 7 #\u0026gt; [2,] 2 5 8 df \u0026lt;- data.frame(x = 1:3, y = 3:1, z = letters[1:3]) # selecting by value of certain vector df[df$x == 2, ] #\u0026gt; x y z #\u0026gt; 2 2 2 b  Importing data in R The following checklist makes it easier to import data correctly into R:\n The first row is maybe reserved for the header, while the first column is used to identify the sampling unit; Avoid names, values or fields with blank spaces, otherwise each word will be interpreted as a separate variable, resulting in errors that are related to the number of elements per line in your data set; Short names are preferred over longer names; Try to avoid using names that contain symbols such as ?, $,%, ^, \u0026amp;, *, (, ),-,#, ?,,,\u0026lt;,\u0026gt;, /, |, \\, [ ,] ,{, and }; Make sure that any missing values in your data set are indicated with NA.  library(readr) # import data from .txt file df \u0026lt;- read_table( \u0026quot;https://s3.amazonaws.com/assets.datacamp.com/blog_assets/test.txt\u0026quot;, col_names = FALSE) df #\u0026gt; # A tibble: 5 x 3 #\u0026gt; X1 X2 X3 #\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; #\u0026gt; 1 1 6 a #\u0026gt; 2 2 7 b #\u0026gt; 3 3 8 c #\u0026gt; 4 4 9 d #\u0026gt; 5 5 10 e # import data from .csv file df \u0026lt;- read.table( \u0026quot;https://s3.amazonaws.com/assets.datacamp.com/blog_assets/test.csv\u0026quot;, header = TRUE, sep = \u0026quot;,\u0026quot;)  Functions Standard format for defining a function in R:\nmy_function_name \u0026lt;- function(arg1 = \u0026quot;default\u0026quot;, arg2 = \u0026quot;default\u0026quot;) { # \u0026#39;cat\u0026#39; is used for concatenating strings merged_string \u0026lt;- cat(arg1, arg2) # if not specified, last evaluated object is returned return(merged_string) } # call a function elsewhere from code arg1 \u0026lt;- \u0026quot;Hello\u0026quot; arg2 \u0026lt;- \u0026quot;World!\u0026quot; a_greeting \u0026lt;- my_function_name(arg1, arg2) #\u0026gt; Hello World! print(a_greeting) #\u0026gt; NULL CRAN - the curated repository of R packages provides millions of functions that you could use to tackle data. You simply need to install a package, and then call the function from your R code function_name(somearguments). For example, the package stats helps you in fitting linear models through the function lm():\nlibrary(stats) x \u0026lt;- rnorm(500) y \u0026lt;- x*4 + rnorm(500) lm.fit \u0026lt;- lm(y~x, data = data.frame(x, y)) print(lm.fit) #\u0026gt; #\u0026gt; Call: #\u0026gt; lm(formula = y ~ x, data = data.frame(x, y)) #\u0026gt; #\u0026gt; Coefficients: #\u0026gt; (Intercept) x #\u0026gt; 0.002114 3.941450 How many functions have been used in the example? What does rnorm mean? You can get informed about any R function by using its documentation ?function_name or ?packageName::function_name.\n Cheat sheets Base R Cheat sheet  Data Types Cheat sheet   Try it yourself! Exercise 1 Try to figure out the answers without executing the code. Check your answers in R Studio.\nGiven the vector: x \u0026lt;- c(\"ww\", \"ee\", \"ff\", \"uu\", \"kk\"), what will be the output for x[c(2,3)] ?\n Let a \u0026lt;- c(2, 4, 6, 8) and b \u0026lt;- c(TRUE, FALSE, TRUE, FALSE), what will be the output for the R expression max(a[b])?\n Is it possible to apply the function my_function_name using x and a as arguments?\n   Exercise 2 Consider a vector x such that: x \u0026lt;- c(1, 3, 4, 7, 11, 18, 29) Write an R statement that will return a list X2 with components of value: x*2, x/2, sqrt(x) and names ‘x*2’, ‘x/2’, ‘sqrt(x)’.\n Exercise 3 Read the file Table0.txt into an object DS.\nWhat is the data type for the object DS? Change the names of the columns to Name, Age, Height, Weight and Sex. Change the row names so that they are the same as Name, and remove the variable Name. Get the number of rows and columns of the data.   Exercise 4 Convert DS from the previous exercise to a data frame DF. Add an additional column “zeros” in DF with all elements 0. Remove the Weight column from DF.     "
},
{
	"uri": "https://tvatter.github.io/dsfba_2021/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]